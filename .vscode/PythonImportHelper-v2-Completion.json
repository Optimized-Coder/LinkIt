[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "core.routes.main",
        "description": "core.routes.main",
        "peekOfCode": "def index():\n    return 'Homepage'",
        "detail": "core.routes.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "core.routes.main",
        "description": "core.routes.main",
        "peekOfCode": "main = Blueprint('main', __name__)\n@main.route('/')\ndef index():\n    return 'Homepage'",
        "detail": "core.routes.main",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "core.extensions",
        "description": "core.extensions",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "core.extensions",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50))\n    username = db.Column(db.String(50), unique=True, \n                         index=True)\n    password = db.Column(db.Text)\n    email = db.Column(db.String(50), unique=True,\n                      index=True)\n    is_admin = db.Column(db.Boolean, default=False)\n    date_created = db.Column(db.Date, default=datetime.now())",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.aea566e383a9_",
        "description": "migrations.versions.aea566e383a9_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('is_admin', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('is_admin')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.aea566e383a9_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.aea566e383a9_",
        "description": "migrations.versions.aea566e383a9_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('is_admin')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.aea566e383a9_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.aea566e383a9_",
        "description": "migrations.versions.aea566e383a9_",
        "peekOfCode": "revision = 'aea566e383a9'\ndown_revision = 'c26c821d76a4'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('is_admin', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.aea566e383a9_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.aea566e383a9_",
        "description": "migrations.versions.aea566e383a9_",
        "peekOfCode": "down_revision = 'c26c821d76a4'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('is_admin', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migrations.versions.aea566e383a9_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.aea566e383a9_",
        "description": "migrations.versions.aea566e383a9_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('is_admin', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:",
        "detail": "migrations.versions.aea566e383a9_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.aea566e383a9_",
        "description": "migrations.versions.aea566e383a9_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('is_admin', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('is_admin')",
        "detail": "migrations.versions.aea566e383a9_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.bfd62b047ef3_",
        "description": "migrations.versions.bfd62b047ef3_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=50), nullable=True),\n    sa.Column('username', sa.String(length=50), nullable=True),\n    sa.Column('password', sa.Text(), nullable=True),\n    sa.Column('email', sa.String(length=50), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.bfd62b047ef3_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.bfd62b047ef3_",
        "description": "migrations.versions.bfd62b047ef3_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_user_username'))\n        batch_op.drop_index(batch_op.f('ix_user_email'))\n    op.drop_table('user')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.bfd62b047ef3_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.bfd62b047ef3_",
        "description": "migrations.versions.bfd62b047ef3_",
        "peekOfCode": "revision = 'bfd62b047ef3'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=50), nullable=True),\n    sa.Column('username', sa.String(length=50), nullable=True),",
        "detail": "migrations.versions.bfd62b047ef3_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.bfd62b047ef3_",
        "description": "migrations.versions.bfd62b047ef3_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=50), nullable=True),\n    sa.Column('username', sa.String(length=50), nullable=True),\n    sa.Column('password', sa.Text(), nullable=True),",
        "detail": "migrations.versions.bfd62b047ef3_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.bfd62b047ef3_",
        "description": "migrations.versions.bfd62b047ef3_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=50), nullable=True),\n    sa.Column('username', sa.String(length=50), nullable=True),\n    sa.Column('password', sa.Text(), nullable=True),\n    sa.Column('email', sa.String(length=50), nullable=True),",
        "detail": "migrations.versions.bfd62b047ef3_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.bfd62b047ef3_",
        "description": "migrations.versions.bfd62b047ef3_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=50), nullable=True),\n    sa.Column('username', sa.String(length=50), nullable=True),\n    sa.Column('password', sa.Text(), nullable=True),\n    sa.Column('email', sa.String(length=50), nullable=True),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.bfd62b047ef3_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.c26c821d76a4_",
        "description": "migrations.versions.c26c821d76a4_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('date_created', sa.Date(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('date_created')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.c26c821d76a4_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.c26c821d76a4_",
        "description": "migrations.versions.c26c821d76a4_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('date_created')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.c26c821d76a4_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.c26c821d76a4_",
        "description": "migrations.versions.c26c821d76a4_",
        "peekOfCode": "revision = 'c26c821d76a4'\ndown_revision = 'bfd62b047ef3'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('date_created', sa.Date(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.c26c821d76a4_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.c26c821d76a4_",
        "description": "migrations.versions.c26c821d76a4_",
        "peekOfCode": "down_revision = 'bfd62b047ef3'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('date_created', sa.Date(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migrations.versions.c26c821d76a4_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.c26c821d76a4_",
        "description": "migrations.versions.c26c821d76a4_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('date_created', sa.Date(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:",
        "detail": "migrations.versions.c26c821d76a4_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.c26c821d76a4_",
        "description": "migrations.versions.c26c821d76a4_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('date_created', sa.Date(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user', schema=None) as batch_op:\n        batch_op.drop_column('date_created')",
        "detail": "migrations.versions.c26c821d76a4_",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "migrations.env",
        "documentation": {}
    }
]